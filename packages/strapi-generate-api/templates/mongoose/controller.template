'use strict';

/**
 * <%= filename %> controller
 *
 * @description: A set of functions called "actions" for managing `<%= globalID %>`.
 */

const jsonld = require('jsonld');
const _ = require('lodash');

module.exports = {

  /**
   * Retrieve <%= id %> records.
   *
   * @return {Object|Array}
   */

  find: async (ctx) => {
    let data = await strapi.services.<%= id %>.fetchAll(ctx.query);

    if(_.get(ctx, ['header', 'accept'])  === 'application/n-quads') {
      data = data.map((value) => {return _.update(_.omit(value, 'id'), '_id', (id) => {return {'@id' : 'http://'+_.get(ctx, ['header', 'host'])+_.get(ctx, ['url'])+'/'+id};})});
      data = await jsonld.toRDF(data, {format: 'application/n-quads'});
      ctx.set('content-type', 'application/n-quads');
    }

    // Send 200 `ok`
    ctx.send(data);
  },

  /**
   * Retrieve a <%= id %> record.
   *
   * @return {Object}
   */

  findOne: async (ctx) => {
    if (!ctx.params._id.match(/^[0-9a-fA-F]{24}$/)) {
      return ctx.notFound();
    }

    let data = await strapi.services.<%= id %>.fetch(ctx.params);

    if(_.get(ctx, ['header', 'accept']) === 'application/n-quads') {
      data = await jsonld.toRDF(_.update(_.omit(data, 'id'), '_id', (id) => {return { '@id' : 'http://'+_.get(ctx, ['header', 'host'])+_.get(ctx, ['url'])};}), {format: 'application/n-quads'});
      ctx.set('content-type', 'application/n-quads');
    }

    // Send 200 `ok`
    ctx.send(data);
  },

  /**
   * Create a/an <%= id %> record.
   *
   * @return {Object}
   */

  create: async (ctx) => {
    return strapi.services.<%= id %>.add(ctx.request.body);
  },

  /**
   * Update a/an <%= id %> record.
   *
   * @return {Object}
   */

  update: async (ctx, next) => {
    return strapi.services.<%= id %>.edit(ctx.params, ctx.request.body) ;
  },

  /**
   * Destroy a/an <%= id %> record.
   *
   * @return {Object}
   */

  destroy: async (ctx, next) => {
    return strapi.services.<%= id %>.remove(ctx.params);
  }
};
